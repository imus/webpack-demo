{
  "compilerOptions": {
    "module": "commonjs", // 编译出的代码采用的模块规范
    "target": "es5", // 编译出的代码采用 ES 的哪个版本
    "sourceMap": true, // 输出 Source Map 方便调试
    /* 
    编译时和babel有同样的问题，在把 ES6 语法转换成 ES5 语法时需要注入辅助函数，为了不让同样的辅助函
    数重复的出现在多个文件中，可以开启 importHelpers。和 Babel 中介绍的 @babel/plugin-transform-runtime
    非常类似，会把辅助函数换成如下导入语句：
        var _tslib = require('tslib');
        _tslib._extend(target);
      这会导致编译出的代码依赖 tslib 这个迷你库，但避免了代码冗余。
    */
    "importHelpers": true // 减少代码冗余
  },
  "exclude": [
    "node_modules"
  ]
}
/* 
1.通过 npm install -g typescript 安装编译器到全局后，你可以通过 tsc hello.ts 命令编译出 hello.js 和 hello.js.map 文件。
2.集成到webpack,需要解决2个问题：
  通过loader转换: awesome-typescript-loader
  webpack在寻找模块对应的文件时，需要尝试.ts后缀: resolve配置项中的extensions选项

*/